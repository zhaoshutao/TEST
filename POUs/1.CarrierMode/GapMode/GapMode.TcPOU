<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="GapMode" Id="{a4290513-ea90-4a50-87cb-7a245b5477f7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM GapMode
VAR
	(*key Command*)
	btn_PowerOn: BOOL;
	btn_PowerOff: BOOL;
	(*GapMode*)
	GapPositionNew:LREAL:=20;
	GapVelocityNew:LREAL:=1;
	btn_GapMove:BOOL;
	btn_GapStop:BOOL;
	(*Var*)
	fb_ton1:TON;
	fb_ton2:TON;
	fb_ton3:TON;
	(*Status*)
	State:DINT;
	Busy:BOOL;
	InitDone:BOOL;
	(*FB*)

	m_state: DINT;
	s_state: DINT;
	(*¼ì²âµ½ÏÞÎ»£¬»Ö¸´Move×´Ì¬*)
	FTrig_ReachLS: F_TRIG;
	FTrig_btn_GapMove: F_TRIG;
	GapOutRange: BOOL;
	(*PowerOff*)
	d_state: DINT;
	LL: LREAL;
	LL2: LREAL;
	BB:LREAL;
	AA:LREAL;
	CC:LREAL;
	DD:LREAL;
	btn_Power: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[GapPositionActual:=(Pos_LeftTopLin+Pos_LeftBottomLin+Pos_RightTopLIn+Pos_RightBottomLIn)/2;
GapVelocityActual:=(Velo_LeftTopLin+Velo_LeftBottomLin+Velo_RightTopLIn+Velo_RightBottomLIn)/2;
(*********************************************************************btn_PowerOn************************************************************)
IF btn_Power AND st_Power=0 THEN
	btn_PowerOn:=TRUE;
	btn_Power:=FALSE;
END_IF
IF btn_Power AND st_Power=1 THEN
	btn_PowerOff:=TRUE;
	btn_Power:=FALSE;
END_IF
(*********************************************************************btn_PowerOn************************************************************)
IF btn_PowerOn THEN
	A_CoupleAxisAndPowerOn();
END_IF
(******************************************************ÉÏµç×´Ì¬£¬²»´¦ÓÚñîºÏ×´Ì¬£¬ESTOP***********************************************)
IF NOT btn_PowerOff THEN
	IF st_Power=1 AND st_Couple<>1THEN
		Error:=TRUE;
		ErrorID:=101;
		FB_PlcEmergencyStop();
		LED_Error:=TRUE;
	END_IF
END_IF
(*********************************************************************Monitor All Carrirt Position***********************************************)
A_MonitoringAllAxis();
(*********************************************************************A_PosDiffDetection***********************************************)
A_PosDiffDetection();
(*********************************************************************btn_Move*****************************************************************)
IF InitDone THEN
	IF btn_GapMove THEN
		CASE m_state OF
			0:
				FB_Move.Mode:=1;						(*1£ºgapÄ£Ê½£»2£ºµ¥ÁºÄ£Ê½£¬3£ºtaperÄ£Ê½*)
				FB_Move.CoupleState:=st_Couple;			(*ñîºÏ×´Ì¬ÊäÈë*)
				FB_Move.PowerState:=st_Power;			(*µçÔ´×´Ì¬ÊäÈë*)
				FB_Move.GapMove:=TRUE;				(*Execute TRUE*)
				FB_Move.GapPosition:=GapPositionNew;		(*Î»ÖÃ*)
				FB_Move.GapVelocity:=GapVelocityNew;		(*ËÙ¶È*)
				FB_Move();								(*Æô¶¯FB*)
				IF GapPositionNew-GapPositionActual>0.001 THEN	(*ÔË¶¯·½ÏòÖ¸Ê¾*)
					GapMoveIndicator:=1;
				ELSIF GapPositionNew-GapPositionActual<0.001 THEN
					GapMoveIndicator:=-1;
				ELSE
					GapMoveIndicator:=0;
				END_IF
				m_state:=1;
			1:
				FB_Move();
				IF NOT FB_Move.GapDone THEN			(*ÔË¶¯Î´Íê³É£¬Ñ­»·*)
					Led_Run:=TRUE;
					m_state:=1;

				ELSE									(*ÔË¶¯Íê³É£¬ÏÂÒ»²½*)
					m_state:=88;
				END_IF
			88:
				btn_GapMove:=FALSE;					(*×´Ì¬»Ö¸´*)
				Led_Run:=FALSE;
				m_state:=0;
		END_CASE
	END_IF
END_IF
(*******************************************************************btn_Stop********************************************************************)
IF btn_GapStop THEN
	Led_Run:=FALSE;
	GapMoveIndicator:=0;
	FB_Move.GapReset:=TRUE;							(*¸øÔË¶¯FB¸øÍ£Ö¹ÐÅºÅ£¬Ê¹FB_Move×´Ì¬»Ö¸´*)
	FB_Move();											(*Æô¶¯FB_Move*)
	btn_GapMove:=FALSE;								(*btn_GapMove:=FALSE*)
	m_state:=0;											(*m_state:=0;*)
	CASE s_state OF
			0:
				FB_Stop.Mode:=1;							(*1£ºgapÄ£Ê½£»2£ºµ¥ÁºÄ£Ê½£»3£ºtaperÄ£Ê½*)
				FB_Stop.CoupleState:=st_Couple;			(*ñîºÏ×´Ì¬ÊäÈë*)
				FB_Stop.PowerState:=st_Power;				(*µçÔ´×´Ì¬ÊäÈë*)
				FB_Stop.GapStop:=TRUE;					(*Execute TRUE*)
				FB_Stop();								(*Æô¶¯FB*)
				s_state:=1;
			1:
				FB_Stop();
				IF NOT FB_Stop.GapDone THEN			(*Í£Ö¹Î´Íê³É£¬Ñ­»·*)
					s_state:=1;
				ELSE									(*Í£Ö¹Íê³É£¬ÏÂÒ»²½*)
					s_state:=88;
				END_IF
			88:
				btn_GapStop:=FALSE;						(*»Ö¸´×´Ì¬*)
				FB_Move.GapReset:=FALSE;				(*ÔËÐÐFB*)
				s_state:=0;
		END_CASE

END_IF
(*********************************************************************btn_PowerOff************************************************************)
IF btn_PowerOff THEN
	A_DecoupleAndPowerOff();
END_IF
(*********************************************************************ÏÞÎ»Åö´¥×´Ì¬»Ö¸´************************************************************)
(*Èç¹û¼ì²âµ½ÏØÏÞÎ»¿ª¹ØÏÂ½µÑØ£¬»Ö¸´Move×´Ì¬*)
FTrig_ReachLS(CLK:=Unreach_LS_Top AND Unreach_LS_Bottom);
IF FTrig_ReachLS.Q THEN
	btn_GapStop:=TRUE;
END_IF
(*Èç¹û¼ì²âµ½TopÏÞÎ»¿ª¹ØFALSE£¬ÇÒÄ¿±êÎ»ÖÃ´óÓÚµ±Ç°Î»ÖÃÊ±£¬»òÕßÏà·´Ê±£¬»Ö¸´Move×´Ì¬*)
IF NOT Unreach_LS_Top AND GapPositionNew-GapPositionActual>0.0005 AND btn_GapMove THEN
	btn_GapStop:=TRUE;
END_IF
IF NOT Unreach_LS_Bottom AND GapPositionNew-GapPositionActual<0.0005 AND btn_GapMove THEN
	btn_GapStop:=TRUE;
END_IF]]></ST>
    </Implementation>
    <Action Name="A_CoupleAxisAndPowerOn" Id="{40c2b519-2cc3-40f4-9c44-20b7cdf3a97a}">
      <Implementation>
        <ST><![CDATA[(****************************************************************
NAME:			A_SetAxisPositionAndCoupleAxisAndPowerOn
DATA:			2017.2.16
VERSION:		1.0.0
DESCRIPTION:	
				ÉÏµãÃüÁîºó£¬Ë³ÐòÖ´ÐÐ£º
				1.FB_SetAxisPosition
				2.FB_CoupleAxis
				3.FB_PowerOn
				·µ»ØÖ´ÐÐÊÇ·ñ³É¹¦
HISTORY:
				2017.2.16		NEW

***************************************************************)
fb_ton2(PT:=t#0.5s);
fb_ton3(PT:=t#0.5s);
FB_CoupleAxis();
CASE State OF
	0:	(*FB_Couple_Axis*)
		FB_CoupleAxis(Execute:=TRUE);
		fb_ton2.IN:=TRUE;
		State:=1;
	1:	(*wait*)

		IF NOT FB_CoupleAxis.InGear THEN		(*FB_Couple_AxisÃ»ÓÐÖ´ÐÐÍê£¬wait£¬³¬Ê±FB Error*)
			IF NOT fb_ton1.Q THEN
				State:=1;
			ELSE
				ErrorID:=1;
				State:=99;
			END_IF
		ELSE
			State:=2;
		END_IF
	2:	(*FB_Power_On*)
		FB_CoupleAxis.Execute:=FALSE;
		FB_Power(On:=TRUE);
		fb_ton3.IN:=TRUE;
		State:=3;
	3:	(*wait*)
		FB_power();
		IF NOT FB_power.OnStatus THEN		(*FB_Power_OnÃ»ÓÐÖ´ÐÐÍê£¬wait£¬³¬Ê±FB Error*)
			IF NOT fb_ton3.Q THEN
				State:=3;
			ELSE
				ErrorID:=2;
				State:=99;
			END_IF
		ELSE
			State:=88;
		END_IF
	88:	(*All Done*)
		btn_PowerOn:=FALSE;
		State:=0;
		Error:=FALSE;
		ErrorID:=0;
		Busy:=FALSE;
		InitDone:=TRUE;

		FB_power.On:=FALSE;
		fb_ton1.IN:=FALSE;
		fb_ton2.IN:=FALSE;
		fb_ton3.IN:=FALSE;
		LED_Error:=FALSE;
	99:
		btn_PowerOn:=FALSE;
		State:=99;
		Error:=TRUE;
		Busy:=FALSE;
		InitDone:=FALSE;
		fb_ton1.IN:=FALSE;
		fb_ton2.IN:=FALSE;
		fb_ton3.IN:=FALSE;
		LED_Error:=TRUE;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_DecoupleAndPowerOff" Id="{bb12ca71-7fb0-4788-a060-ef113355e979}">
      <Implementation>
        <ST><![CDATA[FB_DecoupleAxis();
CASE d_state OF
		0:(*Decouple*)
			FB_DecoupleAxis.Execute:=TRUE;
			FB_DecoupleAxis();
			d_state:=1;
		1:
			IF NOT FB_DecoupleAxis.OutGear THEN
				d_state:=1;
			ELSE
				d_state:=2;
			END_IF
		2:(*PowerOff*)
			FB_Power(Off:=TRUE);
				d_state:=3;
		3:
			IF NOT FB_power.OffStatus THEN
				d_state:=3;
			ELSE
				d_state:=88;
			END_IF
		88:(*ResetAllState*)
			btn_PowerOn:=FALSE;
			btn_GapMove:=FALSE;
			btn_GapStop:=FALSE;
			fb_ton1.IN:=FALSE;
			fb_ton2.IN:=FALSE;
			fb_ton3.IN:=FALSE;
			State:=0;
			Busy:=FALSE;
			InitDone:=FALSE;
			Error:=FALSE;
			ErrorID:=0;
			m_state:=0;
			s_state:=0;
			btn_PowerOff:=FALSE;
			d_state:=0;
			FB_DecoupleAxis.Execute:=FALSE;
			FB_DecoupleAxis.Reset:=TRUE;
			FB_DecoupleAxis();
			FB_CoupleAxis.Execute:=FALSE;
			FB_CoupleAxis.Reset:=TRUE;
			FB_CoupleAxis();
			Led_Run:=FALSE;
			Led_Error:=FALSE;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_MonitoringAllAxis" Id="{a230cf1e-8132-4c13-b179-776e9d15d237}">
      <Implementation>
        <ST><![CDATA[(****************************************************************
NAME:			A_MonitoringAllAxis
DATA:			2017.2.24
VERSION:		1.0.0
DESCRIPTION:	
				Ã¿´ÎÑ­»·¾ùÖ´ÐÐÖáÎ»ÖÃºÍÖáÔË¶¯µÄ¼ì²é
				1.4ÖáÏà¶ÔÔË¶¯¼ì²é
				2.4Öá¹âÕ¤³ßÎ»ÖÃ¡¢ËÙ¶È¶Ô±È¼ì²é
				3.Ã¿Öá¹âÕ¤ºÍ±àÂëÆ÷Î»ÖÃ¶Ô±È¼ì²é
HISTORY:
				2017.2.24		NEW

***************************************************************)
(*************************************************************************************1.4ÖáÏà¶ÔÔË¶¯¼ì²é************************************************************************************)
(*1Öá¶¯£¬ÆäËüÈýÖá²»¶¯*)
IF  (LeftTopLin.Status.Moving AND NOT RightTopLin.Status.Moving AND NOT  LeftBottomLin.Status.Moving AND NOT RightBottomLin.Status.Moving)
	OR (NOT LeftTopLin.Status.Moving AND RightTopLin.Status.Moving AND NOT LeftBottomLin.Status.Moving AND NOT RightBottomLin.Status.Moving)
	OR (NOT LeftTopLin.Status.Moving AND NOT RightTopLin.Status.Moving AND LeftBottomLin.Status.Moving AND NOT  RightBottomLin.Status.Moving)
	OR (NOT LeftTopLin.Status.Moving AND NOT RightTopLin.Status.Moving AND NOT LeftBottomLin.Status.Moving AND RightBottomLin.Status.Moving) THEN
		btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();
		Error:=TRUE;
		ErrorID:=11;
		LED_Error:=TRUE;
(*2Öá¶¯£¬2Öá²»¶¯*)
(*
ELSIF  (LeftTopLin.Status.Moving AND RightTopLin.Status.Moving AND NOT LeftBottomLin.Status.Moving AND NOT RightBottomLin.Status.Moving)
	OR  (LeftTopLin.Status.Moving AND NOT RightTopLin.Status.Moving AND LeftBottomLin.Status.Moving AND NOT RightBottomLin.Status.Moving)
	OR  (LeftTopLin.Status.Moving AND NOT RightTopLin.Status.Moving AND NOT LeftBottomLin.Status.Moving AND RightBottomLin.Status.Moving)
	OR  (NOT LeftTopLin.Status.Moving AND RightTopLin.Status.Moving AND LeftBottomLin.Status.Moving AND NOT RightBottomLin.Status.Moving)
	OR  (NOT LeftTopLin.Status.Moving AND RightTopLin.Status.Moving AND NOT LeftBottomLin.Status.Moving AND RightBottomLin.Status.Moving)
	OR  (NOT LeftTopLin.Status.Moving AND NOT RightTopLin.Status.Moving AND LeftBottomLin.Status.Moving AND RightBottomLin.Status.Moving) THEN
		btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();
		Error:=TRUE;
		ErrorID:=12;
		LED_Error:=TRUE;
*)
(*3Öá¶¯£¬1Öá²»¶¯*)
ELSIF  (NOT LeftTopLin.Status.Moving AND RightTopLin.Status.Moving AND LeftBottomLin.Status.Moving AND RightBottomLin.Status.Moving)
	OR  (LeftTopLin.Status.Moving AND NOT RightTopLin.Status.Moving AND LeftBottomLin.Status.Moving AND RightBottomLin.Status.Moving)
	OR  (LeftTopLin.Status.Moving AND RightTopLin.Status.Moving AND NOT  LeftBottomLin.Status.Moving AND RightBottomLin.Status.Moving)
	OR  (LeftTopLin.Status.Moving AND RightTopLin.Status.Moving AND LeftBottomLin.Status.Moving AND NOT RightBottomLin.Status.Moving) THEN
		btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();
		Error:=TRUE;
		ErrorID:=13;
		LED_Error:=TRUE;
END_IF
(*************************************************************************************2.4Öá¹âÕ¤³ßÎ»ÖÃ¡¢ËÙ¶È¶Ô±È¼ì²é**********************************************************************)
IF  st_Power<>0 THEN
(*Top Î»ÖÃºÍËÙ¶È±È¶Ô*)
		Diff_TopPos_actual:=Pos_leftTopLin-Pos_RightTopLin;
		Diff_TopVelo_actual:=Velo_leftTopLin-Velo_RightTopLin;
IF ABS(Pos_leftTopLin-Pos_RightTopLin)>Threshold_BCTopPos THEN
		btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();
		Error:=TRUE;
		ErrorID:=14;
		LED_Error:=TRUE;
ELSIF ABS(Velo_leftTopLin-Velo_RightTopLin)>Threshold_BCTopVelo  THEN
		(*btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();*)
		AA:=Velo_leftTopLin-Velo_RightTopLin;
		Error:=TRUE;
		ErrorID:=15;
(*Bottom Î»ÖÃºÍËÙ¶È±È¶Ô*)
ELSIF ABS(Pos_LeftBottomLin-Pos_RightBottomLin)>Threshold_BCBottomPos THEN
		btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();
		Error:=TRUE;
		ErrorID:=16;
		LED_Error:=TRUE;
ELSIF ABS(Velo_leftBottomLin-Velo_RightBottomLin)>Threshold_BCBottomVelo  THEN
		(*btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();*)
		BB:=Velo_leftBottomLin-Velo_RightBottomLin;
		Error:=TRUE;
		ErrorID:=17;
(*Left Î»ÖÃºÍËÙ¶È±È¶Ô*)
ELSIF ABS(Pos_LeftTopLin-Pos_LeftBottomLin)>Threshold_BCLeftPos  THEN
		btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();
		Error:=TRUE;
		ErrorID:=18;
		LED_Error:=TRUE;
ELSIF  ABS(Velo_LeftTopLin-Velo_LeftBottomLin)>Threshold_BCLeftVelo THEN
		(*btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();*)
		CC:=Velo_LeftTopLin-Velo_LeftBottomLin;
		Error:=TRUE;
		ErrorID:=19;
(*Right Î»ÖÃºÍËÙ¶È±È¶Ô*)
ELSIF ABS(Pos_RightTopLin-Pos_RightBottomLin)>Threshold_BCRightPos  THEN
		btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();
		Error:=TRUE;
		ErrorID:=20;
		LED_Error:=TRUE;
ELSIF  ABS(Velo_RightTopLin-Velo_RightBottomLin)>Threshold_BCRightVelo THEN
		(*btn_GapStop:=TRUE;
		FB_PlcEmergencyStop();*)
		DD:=Velo_RightTopLin-Velo_RightBottomLin;
		Error:=TRUE;
		ErrorID:=21;
END_IF
END_IF
		LL:=Velo_LeftTopLin-Velo_LeftBottomLin;
		LL2:=Velo_RightTopLin-Velo_RightBottomLin;
(*********************************************************************************3.Ã¿Öá¹âÕ¤ºÍ±àÂëÆ÷Î»ÖÃ¶Ô±È¼ì²é**********************************************************************)]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PosDiffDetection" Id="{02ce6cf0-d54b-4984-a2a3-7ff7eb6d9873}">
      <Implementation>
        <ST><![CDATA[IF ABS(PosDiff_LeftTopLin_actual-PosDiff_RightTopLin_actual)>0.2 THEN		(*ÉÏÖá×óÓÒÊµ¼ÊÎ»ÖÃÖ®²î*)
	ErrorID:=51;
	Error:=TRUE;
	btn_GapStop:=TRUE;
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
ELSIF ABS(PosDiff_LeftBottomLin_actual-PosDiff_RightBottomLin_actual)>0.2 THEN
	ErrorID:=53;
	Error:=TRUE;
	btn_GapStop:=TRUE;
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF

]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="GapMode">
      <LineId Id="37" Count="1" />
      <LineId Id="176" Count="7" />
      <LineId Id="175" Count="0" />
      <LineId Id="39" Count="99" />
    </LineIds>
    <LineIds Name="GapMode.A_CoupleAxisAndPowerOn">
      <LineId Id="0" Count="74" />
    </LineIds>
    <LineIds Name="GapMode.A_DecoupleAndPowerOff">
      <LineId Id="0" Count="45" />
    </LineIds>
    <LineIds Name="GapMode.A_MonitoringAllAxis">
      <LineId Id="0" Count="109" />
    </LineIds>
    <LineIds Name="GapMode.A_PosDiffDetection">
      <LineId Id="0" Count="14" />
    </LineIds>
  </POU>
</TcPlcObject>