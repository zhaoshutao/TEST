<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="UserMode" Id="{dbb58c86-3204-4c0e-a297-03b24a68bd10}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM UserMode
VAR
(*key Command*)
	btn_Power:BOOL;
	btn_PowerOn: BOOL;
	btn_PowerOff: BOOL;
(*GapMode*)
	UserGapPositionNew:LREAL:=20;//target
	UserGapVelocityNew:LREAL:=1;//target
	UserGapPositionDisplay:LREAL;//current
	UserGapVelocityDisplay:LREAL;//current
	UserTaperPositionNew:LREAL:=0;//target
	UserTaperVelocityNew:LREAL:=1;//target
	UserTaperPositionDisplay:LREAL;//current
	//UserTaperPositionDisplay_FromRightTop:LREAL;
	//UserTaperPositionDisplay_FromRightBottom:LREAL;
	UserTaperVelocityDisplay:LREAL;//target
	//Pos_LeftTopLin_NoTaper:LREAL;
	//Pos_RightTopLin_NoTaper:LREAL;
	//Pos_LeftBottomLin_NoTaper:LREAL;
	//Pos_RightBottomLin_NoTaper:LREAL;
	UserGapPositionDisplay_FromLeftTop:LREAL;
	UserGapPositionDisplay_FromLeftBottom:LREAL;
	//
	UserRightGapPositionNew:LREAL;
	UserRightGapVelocityNew:LREAL;
	UserRightGapPositionDisplay:LREAL;
	UserRightGapVelocityDisplay:LREAL;
	UserRightGapPositionDisplay_FromRightTop:LREAL;
	UserRightGapPositionDisplay_FromRightBottom:LREAL;
	(**)
	btn_UserGapMove:BOOL;
	btn_UserGapStop:BOOL;
	(*Var*)
	fb_ton1:TON;
	fb_ton2:TON;
	fb_ton3:TON;
	(*Status*)
	State:DINT;
	Busy:BOOL;
	InitPowerDone:BOOL;
	InitCompensationDatasDone:BOOL;
	(*FB*)
	m_state: DINT;
	n_state: DINT;
	s_state: DINT;
	(*¼ì²âµ½ÏÞÎ»£¬»Ö¸´Move×´Ì¬*)
	FTrig_ReachLS: F_TRIG;
	FTrig_btn_GapMove: F_TRIG;
	GapOutRange: BOOL;
	(*PowerOff*)
	d_state: DINT;
	i: INT;
	j: INT;
	k: INT;
	moni_State:DINT;
	TargetPosLessThanCurrentPos:BOOL;
	TargetLTPosLessThanCurrentLTPos:BOOL;
	TargetRTPosLessThanCurrentRTPos:BOOL;
	TargetLBPosLessThanCurrentLBPos:BOOL;
	TargetRBPosLessThanCurrentRBPos:BOOL;
	PositiveMoving:BOOL;
	HysteresisMoving:BOOL;
	NoneHysteresisMoving:BOOL;
	(*Spectroscopy scanning Mode*)
	IsSSMotionMode:BOOL;
	RegularMotionMode:BOOL;
	SSMotionMode:BOOL;
	SS_StepSize:LREAL:=0.001;
	SS_StepNumber:INT:=10;
	SS_StepVelocity:LREAL:=1;
	SS_Move:BOOL;
	SS_Stop:BOOL;
	SS_MoveState:DINT;
	SS_StopState:DINT;
	SS_currentStep:DINT:=0;
	SS_StepSystemTime_Begin:ARRAY[0..100] OF ULINT;
	SS_StepSystemTime_End:ARRAY[0..100] OF ULINT;
	SS_StepCountTime:ARRAY[0..100] OF ULINT;
	SS_TimeCountBegin:BOOL;
	m: INT;
	SS_TON: TON;
	StepEachTime:TIME;
	StepEachTime_ms:INT:=1000;//ms
	SS_OTSTRUCT :OTSTRUCT ;
	SS_StartPositionDisplay:LREAL;
	RTRG_SS_StartPositionDisplay:R_TRIG;
	SS_InitStartPositionDone:BOOL;
	(*input protection*)
	//
	min_UserGapPositionNew:LREAL:=10;
	max_UserGapPositionNew:LREAL:=200;
	inRange_UserGapPositionNew:BOOL;
	//
	min_UserGapVelocityNew:LREAL:=0;
	max_UserGapVelocityNew:LREAL:=3;
	inRange_UserGapVelocityNew:BOOL;
	//
	min_UserTaperPositionNew: LREAL:=0;;
	max_UserTaperPositionNew: LREAL:=4;
	inRange_UserTaperPositionNew: BOOL;
	//
	min_UserTaperVelocityNew: LREAL:=0;
	max_UserTaperVelocityNew: LREAL:=1;
	inRange_UserTaperVelocityNew: BOOL;
	//
	min_SS_StepSize	: LREAL:=0;
	max_SS_StepSize	: LREAL:=200;
	inRange_SS_StepSize	: BOOL;
	//
	min_SS_StepNumber	: INT:=1;
	max_SS_StepNumber	: INT:=1000;
	inRange_SS_StepNumber	: BOOL;
	//
	min_SS_StepVelocity:LREAL:=0;
	max_SS_StepVelocity:LREAL:=1;
	inRange_SS_StepVelocity:BOOL;
	//
	min_StepEachTime_ms:INT:=100;
	max_StepEachTime_ms:INT:=10000;
	inRange_StepEachTime_ms:BOOL;
	l: INT;
	Threshold_UserTopPos_PLC: LREAL;
	Threshold_UserTopVelo_PLC: LREAL;
	Threshold_UserBottomPos_PLC: LREAL;
	Threshold_UserBottomVelo_PLC: LREAL;
	Threshold_UserLeftPos_PLC: LREAL;
	Threshold_UserLeftVelo_PLC: LREAL;
	Threshold_UserRightPos_PLC: LREAL;
	Threshold_UserRightVelo_PLC: LREAL;
	testa: BOOL;
	testb: BOOL;
	Threshold_GapChangeFlag: LREAL;
	Threshold_TaperChangeFlag: LREAL;
	TaperAndGapSafetyfactor: LREAL:=1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT PositionBiasDone THEN
	RETURN;
END_IF
IF NOT loadParametersDone THEN
	RETURN;
END_IF
(*btn_Power On/Off*)
IF btn_Power AND NOT st_Power THEN
	btn_PowerOn:=TRUE;
	btn_Power:=FALSE;
END_IF
IF btn_Power AND st_Power THEN
	btn_PowerOff:=TRUE;
	btn_Power:=FALSE;
END_IF
IF btn_PowerOn THEN
	A_PowerOn();
END_IF
IF btn_PowerOff THEN
	A_PowerOff();
END_IF

(*检查couple状态，不允许couple*)
A_CheckCoupleStatus();

(*监控四轴位置速度等*)
A_MonitoringAllAxis();

(*补偿数据处理*)
A_InitCompensationData();

(*常规磁间隙开合*)
IF RegularMotionMode AND NOT SSMotionMode THEN
	A_RegularMotion();
END_IF

(*Spectroscopy scanning Mode*)
IF IsSSMotionMode THEN
	SSMotionMode:=TRUE;
	RegularMotionMode:=FALSE;
ELSE
	SSMotionMode:=FALSE;
	RegularMotionMode:=TRUE;
END_IF
IF	SSMotionMode AND NOT RegularMotionMode THEN
	A_SpectroscopyScanningMotion();
END_IF

(*CheckInputPosVelo*)
A_CheckInputPosVelo();
(*检查光栅读数是否在范围内*)
A_CheckLinearEncoder();]]></ST>
    </Implementation>
    <Action Name="A_CheckCoupleStatus" Id="{ec531655-4226-4156-a0f2-db7d67f06866}">
      <Implementation>
        <ST><![CDATA[IF NOT btn_PowerOff THEN
	IF st_Power=1 AND st_Couple<>0THEN
		Error:=TRUE;
		ErrorID:=501;
		LeftTopLinMoveIndicator:=0;
		RightTopLinMoveIndicator:=0;
		LeftBottomLinMoveIndicator:=0;
		RightBottomLinMoveIndicator:=0;
		FB_PlcEmergencyStop();
		LED_Error:=TRUE;
		ErrorDescription:='couple stutas error';
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_CheckInputPosVelo" Id="{8153d8d0-8d46-4560-8544-b339b78263b6}">
      <Implementation>
        <ST><![CDATA[//gap posiion
IF UserGapPositionNew<min_UserGapPositionNew OR UserGapPositionNew>max_UserGapPositionNew THEN
	inRange_UserGapPositionNew:=FALSE;
END_IF
IF UserGapPositionNew>=min_UserGapPositionNew AND UserGapPositionNew<=max_UserGapPositionNew THEN
	inRange_UserGapPositionNew:=TRUE;
END_IF
//gap velocity
IF UserGapVelocityNew<min_UserGapVelocityNew OR UserGapVelocityNew>max_UserGapVelocityNew THEN
	inRange_UserGapVelocityNew:=FALSE;
END_IF
IF UserGapVelocityNew>=min_UserGapVelocityNew AND UserGapVelocityNew<=max_UserGapVelocityNew THEN
	inRange_UserGapVelocityNew:=TRUE;
END_IF
//taper position
IF UserTaperPositionNew<min_UserTaperPositionNew OR UserTaperPositionNew>max_UserTaperPositionNew THEN
	inRange_UserTaperPositionNew:=FALSE;
END_IF
IF UserTaperPositionNew>=min_UserTaperPositionNew AND UserTaperPositionNew<=max_UserTaperPositionNew THEN
	inRange_UserTaperPositionNew:=TRUE;
END_IF
//taper velocity
IF UserTaperVelocityNew<min_UserTaperVelocityNew OR UserTaperVelocityNew>max_UserTaperVelocityNew THEN
	inRange_UserTaperVelocityNew:=FALSE;
END_IF
IF UserTaperVelocityNew>=min_UserTaperVelocityNew AND UserTaperVelocityNew<=max_UserTaperVelocityNew THEN
	inRange_UserTaperVelocityNew:=TRUE;
END_IF
//SS Mode
IF SS_StepSize<min_SS_StepSize OR SS_StepSize>max_SS_StepSize THEN
	inRange_SS_StepSize:=FALSE;
END_IF
IF SS_StepSize>=min_SS_StepSize AND SS_StepSize<=max_SS_StepSize THEN
	inRange_SS_StepSize:=TRUE;
END_IF
IF SS_StepNumber<min_SS_StepNumber OR SS_StepNumber>max_SS_StepNumber THEN
	inRange_SS_StepNumber:=FALSE;
END_IF
IF SS_StepNumber>=min_SS_StepNumber AND SS_StepNumber<=max_SS_StepNumber THEN
	inRange_SS_StepNumber:=TRUE;
END_IF
IF SS_StepVelocity<min_SS_StepVelocity OR SS_StepVelocity>max_SS_StepVelocity THEN
	inRange_SS_StepVelocity:=FALSE;
END_IF
IF SS_StepVelocity>=min_SS_StepVelocity AND SS_StepVelocity<=max_SS_StepVelocity THEN
	inRange_SS_StepVelocity:=TRUE;
END_IF
IF StepEachTime_ms<min_StepEachTime_ms OR StepEachTime_ms>max_StepEachTime_ms THEN
	inRange_StepEachTime_ms:=FALSE;
END_IF
IF StepEachTime_ms>=min_StepEachTime_ms AND StepEachTime_ms<=max_StepEachTime_ms THEN
	inRange_StepEachTime_ms:=TRUE;
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_CheckLinearEncoder" Id="{04ef6a41-e2ba-498d-aa00-f823237bb5de}">
      <Implementation>
        <ST><![CDATA[//如果没有使用光栅、或者光栅参数没设置好，则不检查光栅位置
IF NOT USELinearEncoder OR NOT PositionBiasDone THEN
	RETURN;
END_IF
IF Pos_LeftTopLin <=0 THEN
	ErrorID:=1101;
	Error:=TRUE;
	ErrorDescription:='Pos_LeftTopLin <=0';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_RightTopLin <=0 THEN
	ErrorID:=1102;
	Error:=TRUE;
	ErrorDescription:='Pos_RightTopLin <=0';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_LeftBottomLin <=0 THEN
	ErrorID:=1103;
	Error:=TRUE;
	ErrorDescription:='Pos_LeftBottomLin <=0';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_RightBottomLin <=0 THEN
	ErrorID:=1104;
	Error:=TRUE;
	ErrorDescription:='Pos_RightBottomLin <=0';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
//
IF Pos_LeftTopLin >UserMode.max_UserGapPositionNew/2 THEN
	ErrorID:=1105;
	Error:=TRUE;
	ErrorDescription:='Pos_LeftTopLin >UserMode.max_UserGapPositionNew';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_RightTopLin >UserMode.max_UserGapPositionNew/2 THEN
	ErrorID:=1106;
	Error:=TRUE;
	ErrorDescription:='Pos_RightTopLin>UserMode.max_UserGapPositionNew';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_LeftBottomLin >UserMode.max_UserGapPositionNew/2 THEN
	ErrorID:=1107;
	Error:=TRUE;
	ErrorDescription:='Pos_LeftBottomLin >UserMode.max_UserGapPositionNew';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_RightBottomLin >UserMode.max_UserGapPositionNew/2 THEN
	ErrorID:=1108;
	Error:=TRUE;
	ErrorDescription:='Pos_RightBottomLin >UserMode.max_UserGapPositionNew';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF

//
IF Pos_LeftTopLin <UserMode.min_UserGapPositionNew/2 THEN
	ErrorID:=1109;
	Error:=TRUE;
	ErrorDescription:='Pos_LeftTopLin <UserMode.min_UserGapPositionNew/2';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_RightTopLin <UserMode.min_UserGapPositionNew/2 THEN
	ErrorID:=1110;
	Error:=TRUE;
	ErrorDescription:='Pos_RightTopLin<UserMode.min_UserGapPositionNew/2';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_LeftBottomLin <UserMode.min_UserGapPositionNew/2 THEN
	ErrorID:=1111;
	Error:=TRUE;
	ErrorDescription:='Pos_LeftBottomLin <UserMode.min_UserGapPositionNew';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF
IF Pos_RightBottomLin <UserMode.min_UserGapPositionNew/2 THEN
	ErrorID:=1112;
	Error:=TRUE;
	ErrorDescription:='Pos_RightBottomLin <UserMode.min_UserGapPositionNew';
	FB_PlcEmergencyStop();
	LED_Error:=TRUE;
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_InitCompensationData" Id="{1e6a9c39-c8a5-4c48-b57c-71effe5e3747}">
      <Implementation>
        <ST><![CDATA[(*补偿开始*)
IF USE_SingleAxis_Compensation THEN
	//
	//1.目标位置解算
	//
	(*通过补偿表解算四轴目标位置*)
	//左轴位置由Gap定，右轴位置由右gap定。右gap值=左gap+taper。taper模式和非taper模式一样，非taper模式只是一种特例存在
	//左轴目标位置解算
	IF NOT TaperOrNot THEN
		UserTaperPositionNew:=0;
		UserTaperPositionDisplay:=0;
	END_IF
	UserRightGapPositionNew:=UserGapPositionNew+UserTaperPositionNew;
	//左轴目标位置解算
	FOR	i:= 1 TO 17 DO
			IF UserGapPositionNew/2<M_Compensation[i+1].Encoder AND UserGapPositionNew/2>=M_Compensation[i].Encoder THEN
				IF i<>18 THEN
					LeftTopLinPositionNew:=(((UserGapPositionNew/2-M_Compensation[i].Encoder)*(M_Compensation[i+1].LeftTop-M_Compensation[i].LeftTop))
							/(M_Compensation[i+1].Encoder-M_Compensation[i].Encoder))+M_Compensation[i].LeftTop;
					LeftBottomLinPositionNew:=(((UserGapPositionNew/2-M_Compensation[i].Encoder)*(M_Compensation[i+1].LeftBottom-M_Compensation[i].LeftBottom))
							/(M_Compensation[i+1].Encoder-M_Compensation[i].Encoder))+M_Compensation[i].LeftBottom;
					M_CompensationNumber:=i;
					InitCompensationDatasDone:=TRUE;
				ELSIF i=18 AND UserGapPositionNew/2=M_Compensation[i].Encoder THEN		(*Gap=14µÄÌØÊâÇé¿ö*)
					(**)
					LeftTopLinPositionNew:=M_Compensation[i].LeftTop;
					LeftBottomLinPositionNew:=M_Compensation[i].LeftBottom;
					M_CompensationNumber:=i;
					InitCompensationDatasDone:=TRUE;
				ELSE
					LeftTopLinPositionNew:=UserGapPositionNew/2;
					LeftBottomLinPositionNew:=UserGapPositionNew/2;
					M_CompensationNumber:=i;
					InitCompensationDatasDone:=TRUE;
				END_IF
			END_IF
	END_FOR
	//右轴目标位置解算
	FOR	j:= 1 TO 17 DO
		IF UserRightGapPositionNew/2<M_Compensation[j+1].Encoder AND UserRightGapPositionNew/2>=M_Compensation[j].Encoder THEN
			IF j<>18 THEN
				RightTopLinPositionNew:=(((UserRightGapPositionNew/2-M_Compensation[j].Encoder)*(M_Compensation[j+1].RightTop-M_Compensation[j].RightTop))
						/(M_Compensation[j+1].Encoder-M_Compensation[j].Encoder))+M_Compensation[j].RightTop;
				RightBottomLinPositionNew:=(((UserRightGapPositionNew/2-M_Compensation[j].Encoder)*(M_Compensation[j+1].RightBottom-M_Compensation[j].RightBottom))
						/(M_Compensation[j+1].Encoder-M_Compensation[j].Encoder))+M_Compensation[j].RightBottom;
				M_CompensationNumber:=j;
				InitCompensationDatasDone:=TRUE;
			ELSIF j=18 AND UserRightGapPositionNew/2=M_Compensation[i].Encoder THEN		(*Gap=14µÄÌØÊâÇé¿ö*)
				(**)
				RightTopLinPositionNew:=M_Compensation[i].RightTop;
				RightBottomLinPositionNew:=M_Compensation[i].RightBottom;
				M_CompensationNumber:=j;
				InitCompensationDatasDone:=TRUE;
			ELSE
				RightTopLinPositionNew:=UserGapPositionNew/2;
				RightBottomLinPositionNew:=UserGapPositionNew/2;
				M_CompensationNumber:=j;
				InitCompensationDatasDone:=TRUE;
			END_IF
		END_IF
	END_FOR
	//
	//2.不论taper还是非taper模式，左轴gap都有左轴发推算，右轴gap由右轴反推算。taper为右gap-左gap
	//
	//左轴显示位置反结算
	FOR k:= 1 TO 17 DO
			IF Pos_LeftTopLin<M_Compensation[k+1].LeftTop AND Pos_LeftTopLin>=M_Compensation[k].LeftTop THEN
				UserGapPositionDisplay_FromLeftTop:=2*(((Pos_LeftTopLin-M_Compensation[k].LeftTop)*(M_Compensation[k+1].Encoder-M_Compensation[k].Encoder))
											/(M_Compensation[k+1].LeftTop-M_Compensation[k].LeftTop)+M_Compensation[k].Encoder);
				UserGapPositionDisplay_FromLeftBottom:=2*(((Pos_LeftBottomLin-M_Compensation[k].LeftBottom)*(M_Compensation[k+1].Encoder-M_Compensation[k].Encoder))
											/(M_Compensation[k+1].LeftBottom-M_Compensation[k].LeftBottom)+M_Compensation[k].Encoder);
				UserGapPositionDisplay:=DINT_TO_LREAL(LREAL_TO_DINT(((UserGapPositionDisplay_FromLeftTop+UserGapPositionDisplay_FromLeftBottom)/2)*100000))/100000;
			END_IF
	END_FOR
	//右轴显示位置反结算
	FOR m:= 1 TO 17 DO
			IF Pos_RightTopLin<M_Compensation[m+1].RightTop AND Pos_RightTopLin>=M_Compensation[m].RightTop THEN
				UserRightGapPositionDisplay_FromRightTop:=2*(((Pos_RightTopLin-M_Compensation[m].RightTop)*(M_Compensation[m+1].Encoder-M_Compensation[m].Encoder))
											/(M_Compensation[m+1].RightTop-M_Compensation[m].RightTop)+M_Compensation[m].Encoder);
				UserRightGapPositionDisplay_FromRightBottom:=2*(((Pos_RightBottomLin-M_Compensation[m].RightBottom)*(M_Compensation[m+1].Encoder-M_Compensation[m].Encoder))
											/(M_Compensation[m+1].RightBottom-M_Compensation[m].RightBottom)+M_Compensation[m].Encoder);
				UserRightGapPositionDisplay:=(UserRightGapPositionDisplay_FromRightTop+UserRightGapPositionDisplay_FromRightBottom)/2;
			END_IF
	END_FOR
	IF TaperOrNot THEN
		UserTaperPositionDisplay:=DINT_TO_LREAL(LREAL_TO_DINT((UserRightGapPositionDisplay-UserGapPositionDisplay)*100000))/100000;
	END_IF
END_IF
(*速度可以不用解算，直接用即可*)
LeftTopLinVelocityDisplay:=Velo_LeftTopLin;
RightTopLinVelocityDisplay:=Velo_RightTopLin;
LeftBottomLinVelocityDisplay:=Velo_LeftBottomLin;
RightBottomLinVelocityDisplay:=Velo_RightBottomLin;
//Gap velocity
UserGapVelocityDisplay:=DINT_TO_LREAL(LREAL_TO_DINT(((LeftTopLinVelocityDisplay+RightTopLinVelocityDisplay+
	LeftBottomLinVelocityDisplay+RightBottomLinVelocityDisplay)/2)*100000))/100000;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_MonitoringAllAxis" Id="{ca11d2cd-2857-4b76-bcfc-746a563d8a76}">
      <Implementation>
        <ST><![CDATA[(****************************************************************
NAME:			A_MonitoringAllAxis
DATA:			2018.1.9
VERSION:		1.0.0
DESCRIPTION:	
				Ã¿´ÎÑ­»·¾ùÖ´ÐÐÖáÎ»ÖÃºÍÖáÔË¶¯µÄ¼ì²é
				2.4Öá¹âÕ¤³ßÎ»ÖÃ¡¢ËÙ¶È¶Ô±È¼ì²é
HISTORY:
				2017.1.9		NEW

***************************************************************)

(*************************************************************************************2.4Öá¹âÕ¤³ßÎ»ÖÃ¡¢ËÙ¶È¶Ô±È¼ì²é**********************************************************************)
IF  st_Power<>0 THEN
CASE moni_State OF
(*Top Î»ÖÃºÍËÙ¶È±È¶Ô*)
0:
		//实际(*Position*)
		(*Top*)
		Diff_UserTopPos_actual:=ABS(Pos_leftTopLin-Pos_RightTopLin);
		(*Bottom*)
		Diff_UserBottomPos_actual:=ABS(Pos_LeftBottomLin-Pos_RightBottomLin);
		(*Left*)
		Diff_UserLeftPos_actual:=ABS(Pos_LeftTopLin-Pos_LeftBottomLin);
		(*Right*)
		Diff_UserRightPos_actual:=ABS(Pos_RightTopLin-Pos_RightBottomLin);
		(*Velocity*)
		(*Top*)
		Diff_UserTopVelo_actual:=ABS(Velo_leftTopLin-Velo_RightTopLin);
		(*Bottom*)
		Diff_UserBottomVelo_actual:=ABS(Velo_LeftBottomLin-Velo_RightBottomLin);
		(*Left*)
		Diff_UserLeftVelo_actual:=ABS(Velo_LeftTopLin-Velo_LeftBottomLin);
		(*Right*)
		Diff_UserRightVelo_actual:=ABS(Velo_RightTopLin-Velo_RightBottomLin);
		//阈值
		Threshold_UserTopPos_PLC:=Threshold_UserTopPos+UserTaperPositionDisplay;//Top位置误差=gap运动细微误差+目标taper位置
		Threshold_UserTopVelo_PLC:=Threshold_UserTopVelo+ABS(UserGapVelocityDisplay);//Top速度误差=gap运动细微误差+gap目标速度。因为可能出现一个轴运动完了，另一个轴还在运动的情况
		Threshold_UserBottomPos_PLC:=Threshold_UserBottomPos+UserTaperPositionDisplay;//Bottom同上
		Threshold_UserBottomVelo_PLC:=Threshold_UserBottomVelo+ABS(UserGapVelocityDisplay);//Bottom同上
		Threshold_UserLeftPos_PLC:=Threshold_UserLeftPos+UserTaperPositionDisplay;
		Threshold_UserLeftVelo_PLC:=Threshold_UserLeftVelo+ABS(UserGapVelocityDisplay);
		Threshold_UserRightPos_PLC:=Threshold_UserRightPos+UserTaperPositionDisplay;
		Threshold_UserRightVelo_PLC:=Threshold_UserRightVelo+ABS(UserGapVelocityDisplay);
		//比较
		IF Diff_UserTopPos_actual >Threshold_UserTopPos_PLC THEN
				Error:=TRUE;
				ErrorID:=601;
				ErrorDescription:='Diff_UserTopPos_actual >Threshold_UserTopPos_PLC';
				moni_State:=-100;
		ELSIF Diff_UserTopVelo_actual>Threshold_UserTopVelo_PLC  THEN
				Error:=TRUE;
				ErrorID:=602;
				ErrorDescription:='Diff_UserTopVelo_actual>Threshold_UserTopVelo_PLC';
				moni_State:=-100;
		(*Bottom Î»ÖÃºÍËÙ¶È±È¶Ô*)
		ELSIF Diff_UserBottomPos_actual>Threshold_UserBottomPos_PLC THEN
				Error:=TRUE;
				ErrorID:=603;
				ErrorDescription:='Diff_UserBottomPos_actual>Threshold_UserBottomPos_PLC';
				moni_State:=-100;
		ELSIF Diff_UserBottomVelo_actual>Threshold_UserBottomVelo_PLC  THEN
				Error:=TRUE;
				ErrorID:=604;
				ErrorDescription:='Diff_UserBottomVelo_actual>Threshold_UserBottomVelo_PLC';
				moni_State:=-100;
		(*Left Î»ÖÃºÍËÙ¶È±È¶Ô*)
		ELSIF Diff_UserLeftPos_actual>Threshold_UserLeftPos_PLC  THEN
				Error:=TRUE;
				ErrorID:=605;
				ErrorDescription:='Diff_UserLeftPos_actual>Threshold_UserLeftPos_PLC';
				moni_State:=-100;
		ELSIF  Diff_UserLeftVelo_actual>Threshold_UserLeftVelo_PLC THEN
				Error:=TRUE;
				ErrorID:=606;
				ErrorDescription:='Diff_UserLeftVelo_actual>Threshold_UserLeftVelo_PLC';
				moni_State:=-100;
		(*Right Î»ÖÃºÍËÙ¶È±È¶Ô*)
		ELSIF Diff_UserRightPos_actual>Threshold_UserRightPos_PLC  THEN
				Error:=TRUE;
				ErrorID:=607;
				ErrorDescription:='Diff_UserRightPos_actual>Threshold_UserRightPos_PLC';
				moni_State:=-100;
		ELSIF  Diff_UserRightVelo_actual>Threshold_UserRightVelo_PLC THEN
				Error:=TRUE;
				ErrorID:=608;
				ErrorDescription:='Diff_UserRightVelo_actual>Threshold_UserRightVelo_PLC';
				moni_State:=-100;
		END_IF
-100:
		btn_UserGapStop:=TRUE;
		FB_PlcEmergencyStop();
		Error:=TRUE;
		LED_Error:=TRUE;
END_CASE
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PowerOff" Id="{e3ff8ae4-6e0c-4bb4-9a62-00e47841163f}">
      <Implementation>
        <ST><![CDATA[CASE d_state OF
		0:(*PowerOff*)
			FB_Power(Off:=TRUE);
				d_state:=1;
		1:
			IF NOT FB_power.OffStatus THEN
				d_state:=1;
			ELSE
				d_state:=88;
			END_IF
		88:(*ResetAllState*)
			btn_PowerOn:=FALSE;
			btn_UserGapMove:=FALSE;
			btn_UserGapStop:=FALSE;
			LeftTopLinMoveIndicator:=0;
			RightTopLinMoveIndicator:=0;
			LeftBottomLinMoveIndicator:=0;
			RightBottomLinMoveIndicator:=0;
			fb_ton1.IN:=FALSE;
			fb_ton2.IN:=FALSE;
			fb_ton3.IN:=FALSE;
			State:=0;
			Busy:=FALSE;
			InitPowerDone:=FALSE;
			InitCompensationDatasDone:=FALSE;
			Error:=FALSE;
			ErrorID:=0;
			m_state:=0;
			n_state:=0;
			s_state:=0;
			btn_PowerOff:=FALSE;
			d_state:=0;
			Led_Run:=FALSE;
			Led_Error:=FALSE;
			moni_State:=0;
			i:=0;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_PowerOn" Id="{cacab3c1-f169-458e-acb8-60acf8e4d140}">
      <Implementation>
        <ST><![CDATA[(****************************************************************
NAME:			A_PowerOn
DATA:			2018.1.9
VERSION:		1.0.0
DESCRIPTION:	
				ÉÏµãÃüÁîºó£¬Ë³ÐòÖ´ÐÐ£º
				1.FB_PowerOn
				·µ»ØÖ´ÐÐÊÇ·ñ³É¹¦
HISTORY:
				2019.1.9		NEW

***************************************************************)
fb_ton3(PT:=t#0.5s);
CASE State OF
	0:	(*FB_Power_On*)
		FB_Power(On:=TRUE);
		fb_ton3.IN:=TRUE;
		State:=1;
	1:	(*wait*)
		FB_power();
		IF NOT FB_power.OnStatus THEN		(*FB_Power_OnÃ»ÓÐÖ´ÐÐÍê£¬wait£¬³¬Ê±FB Error*)
			IF NOT fb_ton3.Q THEN
				State:=1;
			ELSE
				ErrorID:=1;
				State:=99;
			END_IF
		ELSE
			State:=88;
		END_IF
	88:	(*All Done*)
		btn_PowerOn:=FALSE;
		State:=0;
		Error:=FALSE;
		ErrorID:=0;
		Busy:=FALSE;
		InitPowerDone:=TRUE;
		FB_power.On:=FALSE;
		fb_ton3.IN:=FALSE;
		LED_Error:=FALSE;
	99:
		Error:=TRUE;
		//ErrorID:=701;
		//ErrorDescription:='power on error';		
		btn_PowerOn:=FALSE;
		State:=99;
		Busy:=FALSE;
		InitPowerDone:=FALSE;
		fb_ton3.IN:=FALSE;
		LED_Error:=TRUE;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_RegularMotion" Id="{79d2706f-89ad-4612-adf2-c80c9fc85b18}">
      <Implementation>
        <ST><![CDATA[(*输入保护*)
IF btn_UserGapMove AND NOT SSMotionMode AND RegularMotionMode THEN
	IF NOT inRange_UserGapPositionNew THEN
		btn_UserGapStop:=TRUE;
		btn_UserGapMove:=FALSE;
		Error:=TRUE;
		ErrorId:=801;
		ErrorDescription:='target Gap position out of range,please check';
		RETURN;
	ELSE
		btn_UserGapStop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
	IF NOT inRange_UserGapVelocityNew THEN
		btn_UserGapStop:=TRUE;
		btn_UserGapMove:=FALSE;
		Error:=TRUE;
		ErrorId:=802;
		ErrorDescription:='target Gap velocity out of range,please check';
		RETURN;
	ELSE
		btn_UserGapStop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';
	END_IF
	IF NOT inRange_UserTaperPositionNew THEN
		btn_UserGapStop:=TRUE;
		btn_UserGapMove:=FALSE;
		Error:=TRUE;
		ErrorId:=803;
		ErrorDescription:='target Taper Position out of range,please check';
		RETURN;
	ELSE
		btn_UserGapStop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';
	END_IF
	IF NOT inRange_UserTaperVelocityNew THEN
		btn_UserGapStop:=TRUE;
		btn_UserGapMove:=FALSE;
		Error:=TRUE;
		ErrorId:=804;
		ErrorDescription:='target Taper velocity out of range,please check';
		RETURN;
	ELSE
		btn_UserGapStop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';
	END_IF
END_IF
(*若GAP将有变化，首先检测TAPER是否超出阈值，若超出，则报错，提示必须先将TAPER回归到0，才可以改变GAP*)
IF ABS(UserGapPositionNew-UserGapPositionDisplay)>Threshold_GapChangeFlag AND btn_UserGapMove THEN
	IF UserTaperPositionDisplay>Threshold_TaperChangeFlag THEN
		btn_UserGapStop:=TRUE;
		btn_UserGapMove:=FALSE;
		Error:=TRUE;
		ErrorId:=809;
		ErrorDescription:='Please Move Taper to zero first before move gap';
		RETURN;
	END_IF
END_IF
(*Taper和gap连锁限制性保护。比如11mm时候如果taper，入口端gap变小，会有压真空盒的问题。设置保护*)
IF UserGapPositionNew-TaperAndGapSafetyfactor*0.41*UserTaperPositionNew<=min_UserGapPositionNew AND btn_UserGapMove THEN
		btn_UserGapStop:=TRUE;
		btn_UserGapMove:=FALSE;
		Error:=TRUE;
		ErrorId:=810;
		ErrorDescription:='Target taper is too big at current Gap';
		RETURN;
END_IF
(*分别比较四轴目标位置与当前位置的差，如果目标位置比当前位置低，则需要运动到更低-回程差一半；再运动至最终目标位置*)
(*
IF LeftTopLinPositionNew-Pos_LeftTopLin>LEDriftErrorThreshold AND RightTopLinPositionNew-Pos_RightTopLin>LEDriftErrorThreshold 
	AND LeftBottomLinPositionNew-Pos_LeftBottomLin>LEDriftErrorThreshold AND RightBottomLinPositionNew-Pos_RightBottomLin>LEDriftErrorThreshold THEN
		TargetPosLessThanCurrentPos:=FALSE;//四轴目标位置都大于当前位置，直接走到目标位置即可，不需要先走到考虑回城误差的临时位置
END_IF
*)
//只在m=和n=0的时候判断，否则会出现一些BUG，比如往大间隙开时，运动到位后m不能回到0.
IF m_state=0 AND n_state=0 THEN
		TargetPosLessThanCurrentPos:=FALSE;
	IF LeftTopLinPositionNew-Pos_LeftTopLin<-LEDriftErrorThreshold THEN
			TargetPosLessThanCurrentPos:=TRUE;
			TargetLTPosLessThanCurrentLTPos:=TRUE;
	ELSE
				TargetLTPosLessThanCurrentLTPos:=FALSE;
	END_IF
	IF RightTopLinPositionNew-Pos_RightTopLin<-LEDriftErrorThreshold THEN
			TargetPosLessThanCurrentPos:=TRUE;
			TargetRTPosLessThanCurrentRTPos:=TRUE;
	ELSE
			TargetRTPosLessThanCurrentRTPos:=FALSE;
	END_IF
	IF LeftBottomLinPositionNew-Pos_LeftBottomLin<-LEDriftErrorThreshold THEN
			TargetPosLessThanCurrentPos:=TRUE;
			TargetLBPosLessThanCurrentLBPos:=TRUE;
	ELSE
			TargetLBPosLessThanCurrentLBPos:=FALSE;
	END_IF
	IF RightBottomLinPositionNew-Pos_RightBottomLin<-LEDriftErrorThreshold THEN
			TargetPosLessThanCurrentPos:=TRUE;
			TargetRBPosLessThanCurrentRBPos:=TRUE;
	ELSE
			TargetRBPosLessThanCurrentRBPos:=FALSE;
	END_IF
END_IF

(*Move*)
IF InitPowerDone AND InitCompensationDatasDone THEN
	//IF btn_UserGapMove THEN
		(*四轴目标位置都大于当前位置，直接走到目标位置即可，不需要先走到考虑回城误差的临时位置*)
		IF NOT TargetPosLessThanCurrentPos AND NOT HysteresisMoving THEN
			CASE m_state OF
				0:
					FB_Move.Mode:=5;						//1.gap;2.single;3.taper;4.debug;5.BCGap&UserMode
					FB_Move.CoupleState:=st_Couple;			
					FB_Move.PowerState:=st_Power;							
					FB_Move.BCLeftTopPosition:=LeftTopLinPositionNew;
					FB_Move.BCLeftTopVelocity:=UserGapVelocityNew/2;
					FB_Move.BCRightTopPosition:=RightTopLinPositionNew;
					FB_Move.BCRightTopVelocity:=UserGapVelocityNew/2;
					FB_Move.BCLeftBottomPosition:=LeftBottomLinPositionNew;
					FB_Move.BCLeftBottomVelocity:=UserGapVelocityNew/2;
					FB_Move.BCRightBottomPosition:=RightBottomLinPositionNew;
					FB_Move.BCRightBottomVelocity:=UserGapVelocityNew/2;		
					IF btn_UserGapMove THEN
						FB_Move.BCGapMove:=TRUE;
						m_state:=1;
						FB_Move();
					END_IF
				1:
					btn_UserGapMove:=FALSE;
					FB_Move();
					IF NOT FB_Move.BCGapDone THEN			(*ÔË¶¯Î´Íê³É£¬Ñ­»·*)
						Led_Run:=TRUE;
						m_state:=1;
					ELSE									(*ÔË¶¯Íê³É£¬ÏÂÒ»²½*)
						m_state:=88;
					END_IF
				88:
					btn_UserGapMove:=FALSE;					(*×´Ì¬»Ö¸´*)
					Led_Run:=FALSE;
					m_state:=0;
			END_CASE
		(*四轴有目标位置小于当前位置，先走到临时位置，再走到目标位置*)
		ELSE
			CASE n_state OF
				0:
					FB_Move.Mode:=5;						//1.gap;2.single;3.taper;4.debug;5.BCGap&UserMode;5:userMode_2
					FB_Move.CoupleState:=st_Couple;			
					FB_Move.PowerState:=st_Power;			
					
					//
					IF TargetLTPosLessThanCurrentLTPos THEN			
						FB_Move.BCLeftTopPosition:=LeftTopLinPositionNew-HysteresisError/2;
					ELSE
						FB_Move.BCLeftTopPosition:=LeftTopLinPositionNew;	
					END_IF
					//
					IF TargetRTPosLessThanCurrentRTPos THEN 
						FB_Move.BCRightTopPosition:=RightTopLinPositionNew-HysteresisError/2;
					ELSE					
						FB_Move.BCRightTopPosition:=RightTopLinPositionNew;
					END_IF
					//
					IF TargetLBPosLessThanCurrentLBPos THEN
						FB_Move.BCLeftBottomPosition:=LeftBottomLinPositionNew-HysteresisError/2;
					ELSE
						FB_Move.BCLeftBottomPosition:=LeftBottomLinPositionNew;
					END_IF
					//
					IF TargetRBPosLessThanCurrentRBPos THEN
						FB_Move.BCRightBottomPosition:=RightBottomLinPositionNew-HysteresisError/2;
					ELSE
						FB_Move.BCRightBottomPosition:=RightBottomLinPositionNew;
					END_IF					
					//
					FB_Move.BCLeftTopVelocity:=UserGapVelocityNew/2;
					FB_Move.BCRightTopVelocity:=UserGapVelocityNew/2;
					FB_Move.BCLeftBottomVelocity:=UserGapVelocityNew/2;
					FB_Move.BCRightBottomVelocity:=UserGapVelocityNew/2;
						
					IF btn_UserGapMove THEN							
						n_state:=1;
						FB_Move.BCGapMove:=TRUE;
						FB_Move();
						HysteresisMoving:=TRUE;
					END_IF
				1:
					btn_UserGapMove:=FALSE;
					FB_Move();
					IF NOT FB_Move.BCGapDone THEN			(*还未运动到位置,运动过程中*)
						Led_Run:=TRUE;
						n_state:=1;
					ELSE									
						n_state:=2;							(*转到下一步，运动到最终位置*)
						FB_Move.BCGapMove:=FALSE;
						//Led_Run:=FALSE;
					END_IF
					(*
					IF NOT Unreach_LS_Bottom THEN
						n_state:=2;							(*在运动过程中如果碰到下限位，则也转到下一步，运动到最终位置*)
						FB_Move.BCGapMove_2:=FALSE;
						FB_Move.BCGapReset_2:=TRUE;
					END_IF
					*)
				2:
					FB_Move.BCGapReset:=FALSE;
					FB_Move.Mode:=5;						//1.gap;2.single;3.taper;4.debug;5.BCGap&UserMode
					FB_Move.CoupleState:=st_Couple;			
					FB_Move.PowerState:=st_Power;			
					FB_Move.BCGapMove:=TRUE;
					//直接走到目标位置，已经走到位置的，可以继续下命令，只不过它不在走了而已
					FB_Move.BCLeftTopPosition:=LeftTopLinPositionNew;	
					FB_Move.BCRightTopPosition:=RightTopLinPositionNew;
					FB_Move.BCLeftBottomPosition:=LeftBottomLinPositionNew;
					FB_Move.BCRightBottomPosition:=RightBottomLinPositionNew;
					//
					FB_Move.BCLeftTopVelocity:=UserGapVelocityNew/2;
					FB_Move.BCRightTopVelocity:=UserGapVelocityNew/2;
					FB_Move.BCLeftBottomVelocity:=UserGapVelocityNew/2;
					FB_Move.BCRightBottomVelocity:=UserGapVelocityNew/2;
					FB_Move();							
					n_state:=3;
				3:
					FB_Move();
					IF NOT FB_Move.BCGapDone THEN			(*还未运动到位置,运动过程中*)
						Led_Run:=TRUE;
						n_state:=3;
					ELSE									
						n_state:=88;							(*运动到了最终位置*)
					END_IF
					(*
					IF NOT Unreach_LS_Bottom THEN
						n_state:=88;							(*在运动过程中如果碰到下限位，则也转到下一步，运动到最终位置*)
						FB_Move.BCGapMove_2:=FALSE;
					END_IF
					*)
				88:
					btn_UserGapMove:=FALSE;					
					Led_Run:=FALSE;
					n_state:=0;
					HysteresisMoving:=FALSE;
			END_CASE
		END_IF
	//END_IF
END_IF

IF btn_UserGapStop THEN
	FB_Move.BCGapReset:=TRUE;							(*¸øÔË¶¯FB¸øÍ£Ö¹ÐÅºÅ£¬Ê¹FB_Move×´Ì¬»Ö¸´*)
	FB_Move();											(*Æô¶¯FB_Move*)
	btn_UserGapMove:=FALSE;								(*btn_GapMove:=FALSE*)
	m_state:=0;	
	n_state:=0;										(*m_state:=0;*)
	CASE s_state OF
			0:
				FB_Stop.Mode:=5;							(*1£ºgapÄ£Ê½£»2£ºµ¥ÁºÄ£Ê½£»3£ºtaperÄ£Ê½£»4£ºDebugÄ£Ê½£»5£ºBCGapÄ£Ê½*)
				FB_Stop.CoupleState:=st_Couple;			(*ñîºÏ×´Ì¬ÊäÈë*)
				FB_Stop.PowerState:=st_Power;				(*µçÔ´×´Ì¬ÊäÈë*)
				FB_Stop.BCGapStop:=TRUE;				(*Execute TRUE*)
				FB_Stop();								(*Æô¶¯FB*)
				s_state:=1;
			1:
				FB_Stop();
				IF NOT FB_Stop.BCGapDone THEN			(*Í£Ö¹Î´Íê³É£¬Ñ­»·*)
					s_state:=1;
				ELSE									(*Í£Ö¹Íê³É£¬ÏÂÒ»²½*)
					s_state:=88;
				END_IF
			88:
				btn_UserGapStop:=FALSE;						(*»Ö¸´×´Ì¬*)
				FB_Move.BCGapReset:=FALSE;				(*ÔËÐÐFB*)
				s_state:=0;
		END_CASE
END_IF

(*触发限位开关后，相当于点击了Stop按钮*)
FTrig_ReachLS(CLK:=Unreach_LS_Top AND Unreach_LS_Bottom);
IF FTrig_ReachLS.Q THEN
	btn_UserGapStop:=TRUE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_SpectroscopyScanningMotion" Id="{6676a965-5ff1-46e4-b651-02d2762b99bc}">
      <Implementation>
        <ST><![CDATA[(*输入保护*)
IF SS_Move AND SSMotionMode AND NOT RegularMotionMode THEN
	IF NOT inRange_SS_StepSize THEN
		SS_Stop:=TRUE;
		SS_Move:=FALSE;
		Error:=TRUE;
		ErrorId:=805;
		ErrorDescription:='target StepSize out of range,please check';
		RETURN;
	ELSE
		SS_Stop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
	//
	IF NOT inRange_SS_StepNumber THEN
		SS_Stop:=TRUE;
		SS_Move:=FALSE;
		Error:=TRUE;
		ErrorId:=806;
		ErrorDescription:='target StepNumber out of range,please check';
		RETURN;
	ELSE
		SS_Stop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
	IF NOT inRange_SS_StepVelocity THEN
		SS_Stop:=TRUE;
		SS_Move:=FALSE;
		Error:=TRUE;
		ErrorId:=807;
		ErrorDescription:='target StepVelocity out of range,please check';
		RETURN;
	ELSE
		SS_Stop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
	IF NOT inRange_StepEachTime_ms THEN
		SS_Stop:=TRUE;
		SS_Move:=FALSE;
		Error:=TRUE;
		ErrorId:=808;
		ErrorDescription:='target StepEachTime_ms out of range,please check';
		RETURN;
	ELSE
		SS_Stop:=FALSE;
		Error:=FALSE;
		ErrorId:=0;
		ErrorDescription:='';	
	END_IF
END_IF
(*单步时长转换*)
StepEachTime:=INT_TO_TIME(StepEachTime_ms);
SS_TON(PT:=StepEachTime);
(*上升沿触发，初始SS位置=当前磁间隙*)
RTRG_SS_StartPositionDisplay(CLK:=SS_Move);
IF RTRG_SS_StartPositionDisplay.Q THEN
	SS_StartPositionDisplay:=UserGapPositionDisplay;
	SS_InitStartPositionDone:=TRUE;
END_IF
(*SS主程序*)
IF InitPowerDone AND InitCompensationDatasDone AND SS_Move AND SS_InitStartPositionDone THEN
	CASE SS_MoveState OF
		0:
				//UserGapPositionNew:=UserGapPositionDisplay+SS_StepSize;
				UserGapPositionNew:=SS_StartPositionDisplay+SS_StepSize*(SS_currentStep+1);
				A_InitCompensationData();
				FB_Move.Mode:=5;						//1.gap;2.single;3.taper;4.debug;5.BCGap&UserMode
				FB_Move.CoupleState:=st_Couple;			
				FB_Move.PowerState:=st_Power;							
				FB_Move.BCLeftTopPosition:=LeftTopLinPositionNew;
				FB_Move.BCLeftTopVelocity:=UserGapVelocityNew/2;
				FB_Move.BCRightTopPosition:=RightTopLinPositionNew;
				FB_Move.BCRightTopVelocity:=UserGapVelocityNew/2;
				FB_Move.BCLeftBottomPosition:=LeftBottomLinPositionNew;
				FB_Move.BCLeftBottomVelocity:=UserGapVelocityNew/2;
				FB_Move.BCRightBottomPosition:=RightBottomLinPositionNew;
				FB_Move.BCRightBottomVelocity:=UserGapVelocityNew/2;		
				FB_Move.BCGapMove:=TRUE;
				FB_Move();
				SS_MoveState:=1;
		1:
				SS_TON.IN:=TRUE;
				FB_Move();
				IF FB_Move.GapMoving AND NOT SS_TimeCountBegin THEN
					SS_StepSystemTime_Begin[SS_currentStep]:=F_GetSysTime();
					SS_TimeCountBegin:=TRUE;
				END_IF
				IF NOT FB_Move.BCGapDone THEN			
					Led_Run:=TRUE;
					SS_MoveState:=1;
				ELSE									
					SS_MoveState:=66;
					SS_StepSystemTime_End[SS_currentStep]:=F_GetSysTime();
					SS_StepCountTime[SS_currentStep]:=SS_StepSystemTime_End[SS_currentStep]-SS_StepSystemTime_Begin[SS_currentStep];
					SS_TimeCountBegin:=FALSE;
				END_IF
		66:
				SS_currentStep:=SS_currentStep+1;			
				Led_Run:=FALSE;
				IF SS_currentStep=SS_StepNumber THEN								
					SS_MoveState:=88;
				END_IF
				IF SS_currentStep<SS_StepNumber THEN
					SS_MoveState:=77;
				END_IF
		77://等待单步时长够
				IF SS_TON.Q THEN
					SS_TON.IN:=FALSE;
					SS_MoveState:=0;
				END_IF
		88:
				SS_TON.IN:=FALSE;
				SS_Move:=FALSE;	
				Led_Run:=FALSE;
				SS_MoveState:=0;
				SS_currentStep:=0;
				SS_InitStartPositionDone:=FALSE;
				//SS_StepSystemTime[SS_StepNumber]:=F_GetSysTime();
	END_CASE
END_IF
(*获取每一步耗时*)
//FOR	m:= 0 TO SS_StepNumber DO
//	SS_StepCountTime[m]:=(SS_StepSystemTime_End[m]-SS_StepSystemTime_Begin[m]);
//END_FOR

(*STOP*)
IF SS_Stop THEN
	FB_Move.BCGapReset:=TRUE;							(*¸øÔË¶¯FB¸øÍ£Ö¹ÐÅºÅ£¬Ê¹FB_Move×´Ì¬»Ö¸´*)
	FB_Move();											(*Æô¶¯FB_Move*)
	SS_Move:=FALSE;								(*btn_GapMove:=FALSE*)
	SS_MoveState:=0;										(*m_state:=0;*)
	CASE SS_StopState OF
			0:
				FB_Stop.Mode:=5;							(*1£ºgapÄ£Ê½£»2£ºµ¥ÁºÄ£Ê½£»3£ºtaperÄ£Ê½£»4£ºDebugÄ£Ê½£»5£ºBCGapÄ£Ê½*)
				FB_Stop.CoupleState:=st_Couple;			(*ñîºÏ×´Ì¬ÊäÈë*)
				FB_Stop.PowerState:=st_Power;				(*µçÔ´×´Ì¬ÊäÈë*)
				FB_Stop.BCGapStop:=TRUE;				(*Execute TRUE*)
				FB_Stop();								(*Æô¶¯FB*)
				SS_StopState:=1;
			1:
				FB_Stop();
				IF NOT FB_Stop.BCGapDone THEN			(*Í£Ö¹Î´Íê³É£¬Ñ­»·*)
					SS_StopState:=1;
				ELSE									(*Í£Ö¹Íê³É£¬ÏÂÒ»²½*)
					SS_StopState:=88;
				END_IF
			88:
				SS_Stop:=FALSE;						(*»Ö¸´×´Ì¬*)
				FB_Move.BCGapReset:=FALSE;				(*ÔËÐÐFB*)
				SS_StopState:=0;
		END_CASE
END_IF

(*触发限位开关后，相当于点击了Stop按钮*)
FTrig_ReachLS(CLK:=Unreach_LS_Top AND Unreach_LS_Bottom);
IF FTrig_ReachLS.Q THEN
	SS_Stop:=TRUE;
END_IF
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="UserMode">
      <LineId Id="767" Count="1" />
      <LineId Id="770" Count="0" />
      <LineId Id="883" Count="1" />
      <LineId Id="882" Count="0" />
      <LineId Id="40" Count="8" />
      <LineId Id="52" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="543" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="548" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="1149" Count="1" />
      <LineId Id="1152" Count="2" />
      <LineId Id="1156" Count="0" />
      <LineId Id="1155" Count="0" />
      <LineId Id="550" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="1012" Count="0" />
      <LineId Id="1011" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_CheckCoupleStatus">
      <LineId Id="2" Count="9" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_CheckInputPosVelo">
      <LineId Id="23" Count="0" />
      <LineId Id="1" Count="6" />
      <LineId Id="9" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="4" />
      <LineId Id="17" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="4" />
      <LineId Id="25" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="35" Count="4" />
      <LineId Id="34" Count="0" />
      <LineId Id="42" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="47" Count="0" />
      <LineId Id="55" Count="4" />
      <LineId Id="54" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_CheckLinearEncoder">
      <LineId Id="61" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="4" Count="3" />
      <LineId Id="2" Count="1" />
      <LineId Id="9" Count="5" />
      <LineId Id="8" Count="0" />
      <LineId Id="16" Count="5" />
      <LineId Id="15" Count="0" />
      <LineId Id="23" Count="5" />
      <LineId Id="22" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="26" />
      <LineId Id="30" Count="0" />
      <LineId Id="69" Count="28" />
      <LineId Id="62" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="104" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_InitCompensationData">
      <LineId Id="206" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="211" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="20" Count="3" />
      <LineId Id="26" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="43" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="59" Count="3" />
      <LineId Id="64" Count="0" />
      <LineId Id="72" Count="4" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="2" />
      <LineId Id="220" Count="1" />
      <LineId Id="224" Count="5" />
      <LineId Id="231" Count="0" />
      <LineId Id="233" Count="3" />
      <LineId Id="238" Count="0" />
      <LineId Id="240" Count="4" />
      <LineId Id="214" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="254" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="278" Count="1" />
      <LineId Id="281" Count="4" />
      <LineId Id="299" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="302" Count="2" />
      <LineId Id="313" Count="1" />
      <LineId Id="308" Count="2" />
      <LineId Id="312" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="319" Count="3" />
      <LineId Id="318" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="323" Count="1" />
      <LineId Id="129" Count="1" />
    </LineIds>
    <LineIds Name="UserMode.A_MonitoringAllAxis">
      <LineId Id="0" Count="34" />
      <LineId Id="109" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="37" Count="1" />
      <LineId Id="88" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="91" Count="2" />
      <LineId Id="44" Count="1" />
      <LineId Id="94" Count="2" />
      <LineId Id="47" Count="2" />
      <LineId Id="97" Count="2" />
      <LineId Id="51" Count="1" />
      <LineId Id="100" Count="2" />
      <LineId Id="54" Count="2" />
      <LineId Id="103" Count="2" />
      <LineId Id="58" Count="1" />
      <LineId Id="106" Count="2" />
      <LineId Id="111" Count="0" />
      <LineId Id="62" Count="7" />
    </LineIds>
    <LineIds Name="UserMode.A_PowerOff">
      <LineId Id="0" Count="27" />
      <LineId Id="38" Count="0" />
      <LineId Id="28" Count="8" />
    </LineIds>
    <LineIds Name="UserMode.A_PowerOn">
      <LineId Id="0" Count="40" />
      <LineId Id="51" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="4" />
    </LineIds>
    <LineIds Name="UserMode.A_RegularMotion">
      <LineId Id="225" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="237" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="252" Count="2" />
      <LineId Id="242" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="255" Count="3" />
      <LineId Id="233" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="260" Count="3" />
      <LineId Id="259" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="264" Count="4" />
      <LineId Id="234" Count="0" />
      <LineId Id="270" Count="3" />
      <LineId Id="269" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="274" Count="4" />
      <LineId Id="231" Count="0" />
      <LineId Id="280" Count="3" />
      <LineId Id="279" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="322" Count="2" />
      <LineId Id="328" Count="4" />
      <LineId Id="326" Count="1" />
      <LineId Id="325" Count="0" />
      <LineId Id="333" Count="1" />
      <LineId Id="337" Count="4" />
      <LineId Id="335" Count="1" />
      <LineId Id="288" Count="5" />
      <LineId Id="2" Count="0" />
      <LineId Id="294" Count="1" />
      <LineId Id="298" Count="23" />
      <LineId Id="296" Count="1" />
      <LineId Id="33" Count="24" />
      <LineId Id="216" Count="0" />
      <LineId Id="58" Count="56" />
      <LineId Id="218" Count="0" />
      <LineId Id="115" Count="83" />
      <LineId Id="1" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="200" Count="3" />
      <LineId Id="199" Count="0" />
    </LineIds>
    <LineIds Name="UserMode.A_SpectroscopyScanningMotion">
      <LineId Id="171" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="190" Count="9" />
      <LineId Id="238" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="244" Count="9" />
      <LineId Id="241" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="257" Count="9" />
      <LineId Id="254" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="270" Count="9" />
      <LineId Id="267" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="300" Count="2" />
      <LineId Id="305" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="1" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="8" Count="10" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="34" Count="4" />
      <LineId Id="160" Count="1" />
      <LineId Id="168" Count="0" />
      <LineId Id="39" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="143" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="53" Count="3" />
      <LineId Id="306" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="88" Count="4" />
      <LineId Id="94" Count="25" />
      <LineId Id="87" Count="0" />
      <LineId Id="79" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>